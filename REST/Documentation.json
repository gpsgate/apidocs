{
  "swagger": "2.0",
  "info": {
    "title": "GpsGate API Documentation",
    "description": "GpsGate API service",
    "contact": {
      "email": "support@gpsgate.com"
    },
    "version": "v.1"
  },
  "basePath": "/comGpsGate/api/v.1",
  "paths": {
    "/deploy/status": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Return deployment's status.",
        "description": "",
        "operationId": "Getdeployment_status",
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/DeployStatusModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/repositories": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Returns a list of RepositoryModels.",
        "description": "",
        "operationId": "GetRepositories",
        "parameters": [
          {
            "name": "Url",
            "in": "query",
            "description": "Repository URL",
            "required": true,
            "type": "string"
          },
          {
            "name": "Category",
            "in": "query",
            "description": "Filter by plugin category",
            "required": false,
            "type": "string"
          },
          {
            "name": "InstallationStatus",
            "in": "query",
            "required": true,
            "type": "string",
            "default": "All",
            "enum": [
              "All",
              "NotInstalled",
              "Outdated",
              "UpToDate"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RepositoryModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/plugins": {
      "get": {
        "tags": [
          "Plugins"
        ],
        "summary": "Returns a list of Plugins.",
        "description": "",
        "operationId": "ListAllPlugins",
        "parameters": [
          {
            "name": "Category",
            "in": "query",
            "description": "Filter by plugin category",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/PluginModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Plugins"
        ],
        "summary": "Updates All Plugins.",
        "description": "",
        "operationId": "UpdateAllPlugins",
        "parameters": [
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PluginUpdateModel"
            },
            "name": "Repository Url",
            "description": "The Repository Url that is used to update the plugins.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Plugins"
        ],
        "summary": "Installs a Plugin.",
        "description": "",
        "operationId": "InstallAPlugin",
        "parameters": [
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PluginInstallModel"
            },
            "name": "Plugin",
            "description": "The plugin to install.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Return a list of Applications.",
        "description": "",
        "operationId": "GetApplications",
        "parameters": [
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ApplicationModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Application"
        ],
        "summary": "Creates a new application.",
        "description": "",
        "operationId": "PostApplication",
        "parameters": [
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationCreateModel"
            },
            "name": "application",
            "description": "Application Model. <br/><br/><b>TimeZone</b> (Optional) property of the model should be set to one of the standard time zones available here 'https://en.wikipedia.org/wiki/List_of_tz_database_time_zones' (default is <b>Etc/UTC</b>)<br/><br/><b>Language</b> (Optional) property of the model should be set to the name of one of the language plugins available on your server (default is <b>English</b>)<br/><br/><b>Measurement</b> (Optional) property of the model should be set to one of these values: metric, en-us, nautic (default is <b>metric</b>)<br/><br/><b>Culture</b> (Optional) property of the model should be set to one of the cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is 'languagecode-regioncode' where languagecode is a lowercase two-letter code derived from ISO 639-1 and regioncode is an uppercase two-letter code derived from ISO 3166. For example, <b>en-US</b> for English (United States) is a specific culture.<br/><br/><b>MaxUsers</b> (Optional) MaxNumber of users for the application.<br/><br/><b>Expires</b> (Optional) ISO date time for when the application expires.<br/><br/>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ApplicationCreateModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:long}": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Return an Application by Id.",
        "description": "",
        "operationId": "GetApplicationByApplicationid",
        "parameters": [
          {
            "name": "applicationid:long",
            "in": "path",
            "description": "Applicationid of the Application you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ApplicationModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Application"
        ],
        "summary": "Update application properties.",
        "description": "",
        "operationId": "PutApplicationByApplicationid",
        "parameters": [
          {
            "name": "applicationid:long",
            "in": "path",
            "description": "Applicationid of the Application you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ApplicationEditModel"
            },
            "name": "application",
            "description": "Application Model. <br/><br/><b>Name</b> (Optional) Name of application. Omit to keep the current name.<br/><br/><b>Description</b> (Optional) Description of application. Omit to keep the current name.<br/><br/><b>TimeZone</b> (Optional) property of the model should be set to one of the standard time zones available here 'https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'. Omit to keep existing.<br/><br/><b>Language</b> (Optional) property of the model should be set to the name of one of the language plugins available on your server. Omit to keep existing.<br/><br/><b>Measurement</b> (Optional) property of the model should be set to one of these values: metric, en-us, nautic. Omit to keep existing.<br/><br/><b>Culture</b> (Optional) property of the model should be set to one of the cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is 'languagecode-regioncode' where languagecode is a lowercase two-letter code derived from ISO 639-1 and regioncode is an uppercase two-letter code derived from ISO 3166. For example, <b>en-US</b> for English (United States) is a specific culture.<br/><br/><b>MaxUsers</b> (Optional) MaxNumber of users for the application.<br/><br/><b>Expires</b> (Optional) ISO date time for when the application expires.<br/><br/>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ApplicationEditModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/views": {
      "get": {
        "tags": [
          "Views"
        ],
        "summary": "Return a list of Views",
        "description": "",
        "operationId": "GetViews",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ViewModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Views"
        ],
        "summary": "Add a View",
        "description": "",
        "operationId": "PostView",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ViewModel"
            },
            "name": "view",
            "description": "View object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ViewModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/views/{viewid:long}": {
      "delete": {
        "tags": [
          "Views"
        ],
        "summary": "Delete a View",
        "description": "",
        "operationId": "DeleteViewByViewid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "viewid:long",
            "in": "path",
            "description": "Viewid of the View you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/variables": {
      "get": {
        "tags": [
          "Variables"
        ],
        "summary": "Return a list of Variables.",
        "description": "",
        "operationId": "GetVariables",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/VariableModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return a list of Users.",
        "description": "",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "ViewId",
            "in": "query",
            "description": "Filters the result set by ViewId",
            "required": false,
            "type": "integer"
          },
          {
            "name": "UpdatesFrom",
            "in": "query",
            "description": "Returns all users that has been active after or equal to this timestamp (As defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a>)<br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add a User.",
        "description": "",
        "operationId": "PostUser",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCreateModel"
            },
            "name": "user",
            "description": "User object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserCreateModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:long}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return a User by UserId.",
        "description": "",
        "operationId": "GetUserByUserId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:long",
            "in": "path",
            "description": "UserId of the User you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "UserId",
            "enum": [
              "UserId"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a User",
        "description": "",
        "operationId": "PutUserByUserId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:long",
            "in": "path",
            "description": "UserId of the User you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserEditModel"
            },
            "name": "user",
            "description": "User object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserEditModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove a User",
        "description": "",
        "operationId": "DeleteUserByUserId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:long",
            "in": "path",
            "description": "UserId of the User you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{username:string}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return a User by Username.",
        "description": "",
        "operationId": "GetUserByUsername",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "username:string",
            "in": "path",
            "description": "Username of the User you want to work with.",
            "required": true,
            "type": "string",
            "format": ""
          },
          {
            "name": "Identifier",
            "in": "query",
            "required": false,
            "type": "string",
            "default": "Username",
            "enum": [
              "Username"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/users": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Add existing users to an application",
        "description": "",
        "operationId": "PatchUsers",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "name": "Ids of users",
            "description": "An array of Users Ids.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/tripinfos": {
      "get": {
        "tags": [
          "Tracks"
        ],
        "summary": "Return a list of TripInfos.",
        "description": "",
        "operationId": "GetTripInfos",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "The user id for which you want to get the Trip summaries",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Date",
            "in": "query",
            "description": "The date, in Vehicle Triper application local time, that you want to get the Trip summaries for. (for example 2017-10-30)",
            "required": true,
            "type": "string",
            "format": "date"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/TripInfoModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/tracks": {
      "get": {
        "tags": [
          "Tracks"
        ],
        "summary": "Return a list of TrackModels.",
        "description": "",
        "operationId": "GetTracks",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Date",
            "in": "query",
            "description": "The date, in Vehicle Tracker application local time, that you want to get the tracks for. (for example 2017-10-30)",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "The user id for which you want to get the tracks",
            "required": true,
            "type": "integer"
          },
          {
            "name": "From",
            "in": "query",
            "description": "From timestamp, in Vehicle Tracker application local time (default is 00:00:00) from which you want to get the tracks. (format is MM:HH:SS, for example 17:10:30)",
            "required": false,
            "type": "string"
          },
          {
            "name": "Until",
            "in": "query",
            "description": "Until timestamp, in Vehicle Tracker application local time (default is 23:59:59) to which you want to get the tracks. (format is MM:HH:SS, for example 23:10:30)",
            "required": false,
            "type": "string"
          },
          {
            "name": "Filtered",
            "in": "query",
            "description": "Set this flag if you want to use filtered reader",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/TrackModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/trackinfos": {
      "get": {
        "tags": [
          "Tracks"
        ],
        "summary": "Return a list of TrackInfos.",
        "description": "",
        "operationId": "GetTrackInfos",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Date",
            "in": "query",
            "description": "The date, in Vehicle Tracker application local time, that you want to get the track summaries for. (for example 2017-10-30)",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "The user id for which you want to get the track summaries",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Filtered",
            "in": "query",
            "description": "Set this flag if you want to use filtered reader",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/TrackInfoModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the latest position and variables for a user",
        "description": "",
        "operationId": "GetStatus",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserStatusModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/devices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Return a list of Devices for a User.",
        "description": "",
        "operationId": "GetDevices",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/DeviceModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Create a Device.",
        "description": "",
        "operationId": "PostDevice",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeviceCreateModel"
            },
            "name": "device",
            "description": "Device object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/DeviceCreateModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/devices/{deviceid:int}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Return a Device by Device ID.",
        "description": "",
        "operationId": "GetDeviceByDeviceId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/DeviceModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Remove a Device",
        "description": "",
        "operationId": "DeleteDeviceByDeviceId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/devices/{deviceid:int}/commands": {
      "get": {
        "tags": [
          "Commands"
        ],
        "summary": "Return commands for device.",
        "description": "",
        "operationId": "GetCommands",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/CommandModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Commands"
        ],
        "summary": "Execute command (with or without args)",
        "description": "",
        "operationId": "PostCommand",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CommandAddModel"
            },
            "name": "command",
            "description": "Command object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/CommandAddModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/users/{userid:int}/devices/{deviceid:int}/commands": {
      "delete": {
        "tags": [
          "Commands"
        ],
        "summary": "Abort all commands for the given device",
        "description": "",
        "operationId": "DeleteCommands",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/devices/{deviceid:int}/commandstatus": {
      "get": {
        "tags": [
          "CommandStatus"
        ],
        "summary": "Return the status of the last command for the given device.",
        "description": "",
        "operationId": "GetCommandStatus",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "deviceid:int",
            "in": "path",
            "description": "ID of the device.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/CommandStatusModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/customfields": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns a list of user custom fields.",
        "description": "",
        "operationId": "GetCustomFields",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserCustomFieldModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/customfields/{customfieldname:string}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a user custom field.",
        "description": "",
        "operationId": "PutCustomFieldByCustomFieldName",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "customfieldname:string",
            "in": "path",
            "description": "CustomFieldName of the CustomField you want to work with.",
            "required": true,
            "type": "string",
            "format": ""
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCustomFieldModel"
            },
            "name": "customfield",
            "description": "CustomField object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserCustomFieldModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/users/{userid:int}/customfields": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates a list of a user's custom fields.",
        "description": "",
        "operationId": "PutCustomFields",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserCustomFieldModel"
              }
            },
            "name": "customfields",
            "description": "An array of CustomFields.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserCustomFieldModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/accumulators": {
      "get": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Return a list of Accumulators of the User with their current values. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
        "description": "",
        "operationId": "GetAccumulators",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/AccumulatorModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/accumulators/{accumulatorid:long}": {
      "get": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Return an accumulator value at a specific time. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
        "description": "",
        "operationId": "GetAccumulatorByAccumulatorid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "accumulatorid:long",
            "in": "path",
            "description": "Accumulatorid of the Accumulator you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Timestamp",
            "in": "query",
            "description": "Returns an accumulator value at this specific timestamp (As defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a>)<br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/AccumulatorModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/usertypes": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return a list of UserTypes.",
        "description": "",
        "operationId": "GetUserTypes",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserTypeModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/usersstatus": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Returns the latest position and variables for users within an application",
        "description": "",
        "operationId": "GetUsersStatus",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "TagId",
            "in": "query",
            "description": "Filter results by a tag",
            "required": false,
            "type": "integer"
          },
          {
            "name": "UpdatesFrom",
            "in": "query",
            "description": "Returns status of all users that has been active after or equal to this timestamp (As defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a>)<br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date-time\t"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserStatusModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/trackinfos": {
      "get": {
        "tags": [
          "Tracks"
        ],
        "summary": "Return a list of TrackInfo.",
        "description": "",
        "operationId": "GetApplicationTrackInfos",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "UpdatedSince",
            "in": "query",
            "description": "Get tracks updated since this timestamp. Defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "From",
            "in": "query",
            "description": "Only include tracks created after this timestamp (from start date). Defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "Until",
            "in": "query",
            "description": "Only include tracks created before this timestamp (until end date). Defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ApplicationTrackInfoModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/trackinfos/{trackinfoid:int}/tracks": {
      "get": {
        "tags": [
          "Tracks"
        ],
        "summary": "Return a list of TrackModels.",
        "description": "",
        "operationId": "GetTracksByTrackInfoId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "trackinfoid:int",
            "in": "path",
            "description": "The trackinfo id for which you want to get the tracks",
            "required": true,
            "type": "integer"
          },
          {
            "name": "Filtered",
            "in": "query",
            "description": "Set this flag if you want to use filtered reader",
            "required": false,
            "type": "boolean",
            "default": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/TrackModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/tokens": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Authorization",
        "description": "This method is used for getting an ApiKey",
        "operationId": "GetAPIToken",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Credentials"
            },
            "name": "Credentials",
            "description": "Credentials for getting the token (ApiKey).",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ApiKey"
            }
          }
        }
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get a list of Tags",
        "description": "",
        "operationId": "GetTags",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/TagModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add a Tag",
        "description": "",
        "operationId": "PostTag",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagModel"
            },
            "name": "tag",
            "description": "Tag object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/TagModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/tags/{tagid:long}": {
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update a Tag",
        "description": "",
        "operationId": "PutTagByTagid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tagid:long",
            "in": "path",
            "description": "Tagid of the Tag you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TagModel"
            },
            "name": "tag",
            "description": "Tag object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/TagModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove a Tag",
        "description": "",
        "operationId": "DeleteTagByTagid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tagid:long",
            "in": "path",
            "description": "Tagid of the Tag you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/tags/{tagid:int}/users": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get users within a tag",
        "description": "",
        "operationId": "GetUsersWithinTag",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "tagid:int",
            "in": "path",
            "description": "Id of the target tag.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Add a user to a tag",
        "description": "",
        "operationId": "PostUserWithinTag",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "tagid:int",
            "in": "path",
            "description": "Id of the target tag.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/APIModel"
            },
            "name": "Id",
            "description": "ID of the user that is added to the tag.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/UserModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/tags/{tagid:int}/users/{userid:long}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Remove a user from a tag",
        "description": "",
        "operationId": "DeleteUserWithinTagByUserid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:long",
            "in": "path",
            "description": "Userid of the User you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "tagid:int",
            "in": "path",
            "description": "Id of the target tag.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/sessions/currentsession": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Return current Session.",
        "description": "",
        "operationId": "GetSession",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/SessionModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a list of Roles",
        "description": "",
        "operationId": "GetRoles",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/RoleModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/roles/{roleid:long}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a Role by Id",
        "description": "",
        "operationId": "GetRoleByRoleid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "roleid:long",
            "in": "path",
            "description": "Roleid of the Role you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/RoleModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/roles/{roleid:int}/users/{userid:long}": {
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Remove a user from a role",
        "description": "",
        "operationId": "DeleteUserWithinRoleByUserid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "roleid:int",
            "in": "path",
            "description": "Id of the target role.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:long",
            "in": "path",
            "description": "Userid of the User you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/roles/{roleid:int}/users": {
      "post": {
        "tags": [
          "Roles"
        ],
        "summary": "Adds a list of users to the role",
        "description": "",
        "operationId": "PostUsersWithinRole",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "roleid:int",
            "in": "path",
            "description": "Id of the target role.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "name": "userIds",
            "description": "IDs of the users which are added to the role.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Remove all users from this role",
        "description": "",
        "operationId": "DeleteUsersWithinRole",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "roleid:int",
            "in": "path",
            "description": "Id of the target role.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/reversegeocodes": {
      "post": {
        "tags": [
          "Geocoding"
        ],
        "summary": "Gets a list of geographic coordinates and returns their readable addresses or place names",
        "description": "",
        "operationId": "GetAddressBatch",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/Position"
              }
            },
            "name": "geographic coordinates",
            "description": "An array of geographic coordinates.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ReverseGeocodeResult"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reversegeocode": {
      "get": {
        "tags": [
          "Geocoding"
        ],
        "summary": "Gets geographic coordinate and returns its readable address or place name",
        "description": "",
        "operationId": "GetAddress",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "lon",
            "in": "query",
            "description": "Longitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "Latitude",
            "required": true,
            "type": "number",
            "format": "double"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ReverseGeocodeResult"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/messageproviders": {
      "get": {
        "tags": [
          "MessageProviders"
        ],
        "summary": "Return a list of Message Providers.",
        "description": "",
        "operationId": "GetMessageProviders",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/MessageProviderModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "MessageProviders"
        ],
        "summary": "Add a Message Provider",
        "description": "",
        "operationId": "PostMessageProvider",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MessageProviderModel"
            },
            "name": "messageprovider",
            "description": "MessageProvider object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/MessageProviderModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/messageproviders/{messageproviderid:long}": {
      "get": {
        "tags": [
          "MessageProviders"
        ],
        "summary": "Return a Message Provider by ID.",
        "description": "",
        "operationId": "GetMessageProviderByMessageProviderid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "messageproviderid:long",
            "in": "path",
            "description": "MessageProviderid of the MessageProvider you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/MessageProviderModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "MessageProviders"
        ],
        "summary": "Update a Message Provider",
        "description": "",
        "operationId": "PutMessageProviderByMessageProviderid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "messageproviderid:long",
            "in": "path",
            "description": "MessageProviderid of the MessageProvider you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MessageProviderModel"
            },
            "name": "messageprovider",
            "description": "MessageProvider object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/MessageProviderModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "MessageProviders"
        ],
        "summary": "Delete a Message Provider",
        "description": "",
        "operationId": "DeleteMessageProviderByMessageProviderid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "messageproviderid:long",
            "in": "path",
            "description": "MessageProviderid of the MessageProvider you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/messageprovidertypes": {
      "get": {
        "tags": [
          "MessageProviderTypes"
        ],
        "summary": "Return a list of Message Provider Types.",
        "description": "",
        "operationId": "GetMessageProviderTypes",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/MessageProviderTypeModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofences": {
      "get": {
        "tags": [
          "Geofences"
        ],
        "summary": "Return Geofences within an application.",
        "description": "",
        "operationId": "GetGeofences",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/GeofenceModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Geofences"
        ],
        "summary": "Create a Geofence.",
        "description": "",
        "operationId": "PostGeofence",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            },
            "name": "geofence",
            "description": "Geofence object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofences/{geofenceid:long}": {
      "get": {
        "tags": [
          "Geofences"
        ],
        "summary": "Return a Geofence by ID.",
        "description": "",
        "operationId": "GetGeofenceByGeofenceid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofenceid:long",
            "in": "path",
            "description": "Geofenceid of the Geofence you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Geofences"
        ],
        "summary": "Update a Geofence.",
        "description": "",
        "operationId": "PutGeofenceByGeofenceid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofenceid:long",
            "in": "path",
            "description": "Geofenceid of the Geofence you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            },
            "name": "geofence",
            "description": "Geofence object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Geofences"
        ],
        "summary": "Delete a Geofence.",
        "description": "",
        "operationId": "DeleteGeofenceByGeofenceid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofenceid:long",
            "in": "path",
            "description": "Geofenceid of the Geofence you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/geofences": {
      "delete": {
        "tags": [
          "Geofences"
        ],
        "summary": "Delete several geofences.",
        "description": "",
        "operationId": "DeleteGeofences",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "name": "Geofence ids to remove",
            "description": "An array of geofence ids to remove.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofences/{geofenceid:int}/users": {
      "get": {
        "tags": [
          "Geofences"
        ],
        "summary": "Returns users currently within the geofence.",
        "description": "",
        "operationId": "GetUsersWithinGeofence",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "geofenceid:int",
            "in": "path",
            "description": "Id of the geofence.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/UserModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofencegroups": {
      "get": {
        "tags": [
          "GeofenceGroups"
        ],
        "summary": "Get all Geofence Groups in an Application",
        "description": "",
        "operationId": "GetGeofenceGroups",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/GeofenceGroupModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "GeofenceGroups"
        ],
        "summary": "Add a new Geofence Group",
        "description": "",
        "operationId": "PostGeofenceGroup",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            },
            "name": "geofencegroup",
            "description": "GeofenceGroup object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofencegroups/{geofencegroupid:long}": {
      "get": {
        "tags": [
          "GeofenceGroups"
        ],
        "summary": "Get a Geofence Group by Id",
        "description": "",
        "operationId": "GetGeofenceGroupByGeofenceGroupid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofencegroupid:long",
            "in": "path",
            "description": "GeofenceGroupid of the GeofenceGroup you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "GeofenceGroups"
        ],
        "summary": "Update a Geofence Group",
        "description": "",
        "operationId": "PutGeofenceGroupByGeofenceGroupid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofencegroupid:long",
            "in": "path",
            "description": "GeofenceGroupid of the GeofenceGroup you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            },
            "name": "geofencegroup",
            "description": "GeofenceGroup object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "GeofenceGroups"
        ],
        "summary": "Delete a Geofence Group",
        "description": "",
        "operationId": "DeleteGeofenceGroupByGeofenceGroupid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofencegroupid:long",
            "in": "path",
            "description": "GeofenceGroupid of the GeofenceGroup you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceGroupModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofencegroups/{geofencegroupid:int}/geofences": {
      "get": {
        "tags": [
          "GeofenceGroups/Geofence"
        ],
        "summary": "Get Geofences within a Geofence Group",
        "description": "",
        "operationId": "GetGeofencesWithinGeofenceGroup",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "geofencegroupid:int",
            "in": "path",
            "description": "ID of the Geofence Group you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/GeofenceModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "GeofenceGroups/Geofence"
        ],
        "summary": "Add a Geofence to a Geofence Group",
        "description": "",
        "operationId": "PostGeofenceWithinGeofenceGroup",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofencegroupid:int",
            "in": "path",
            "description": "ID of the Geofence Group you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/APIModel"
            },
            "name": "Id",
            "description": "ID of the Geofence that is added to the Geofence Group.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeofenceModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geofencegroups/{geofencegroupid:int}/geofences/{geofenceid:int}": {
      "delete": {
        "tags": [
          "GeofenceGroups/Geofence"
        ],
        "summary": "Remove a Geofence from a Geofence Group",
        "description": "",
        "operationId": "DeleteGeofenceWithinGeofenceGroupByGeofenceId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "geofenceid:int",
            "in": "path",
            "description": "ID of the Geofence you want to work with.",
            "required": true,
            "type": "integer",
            "format": "integer"
          },
          {
            "name": "geofencegroupid:int",
            "in": "path",
            "description": "ID of the Geofence Group you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/geocodes": {
      "post": {
        "tags": [
          "Geocoding"
        ],
        "summary": "Gets a list of addresses and returns their geographic coordinates",
        "description": "",
        "operationId": "GetGeographicCoordinatesBatch",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "name": "addresses",
            "description": "An array of addresses.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/GeocodeResult"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/geocode": {
      "get": {
        "tags": [
          "Geocoding"
        ],
        "summary": "Gets an address and returns its geographic coordinates",
        "description": "",
        "operationId": "GetGeographicCoordinates",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "address",
            "in": "query",
            "description": "Address you want to geocode.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/GeocodeResult"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a list of Events",
        "description": "",
        "operationId": "GetEvents",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          },
          {
            "name": "Date",
            "in": "query",
            "description": "The date, in Vehicle Tracker application local time, that you want to get the event for. (for example 2017-10-30)",
            "required": true,
            "type": "string",
            "format": "date"
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "The user id for which you want to get the events",
            "required": true,
            "type": "integer"
          },
          {
            "name": "RuleId",
            "in": "query",
            "description": "The rule id for which you want to get the events",
            "required": true,
            "type": "integer"
          },
          {
            "name": "OpenEvents",
            "in": "query",
            "description": "Set this flag if you want to get only open events",
            "required": false,
            "type": "boolean",
            "default": 0
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/EventModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/eventrules": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get a list of EventRules",
        "description": "",
        "operationId": "GetEventRules",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/EventRuleModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/devicetypes": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Return a list of DeviceTypes.",
        "description": "",
        "operationId": "GetDeviceTypes",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/DeviceTypeModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/devicetypes/{devicetypesid:int}/devicemappers": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Return a list of DeviceMappers per DeviceType.",
        "description": "",
        "operationId": "GetDeviceMappers",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "devicetypesid:int",
            "in": "path",
            "description": "ID of the UserType.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/DeviceMapperModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/accumulators": {
      "get": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Return a list of Accumulators with their current values. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
        "description": "",
        "operationId": "GetAccumulators",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/AccumulatorModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/accumulators/{accumulatorid:long}": {
      "get": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Return an accumulator value at a specific time. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
        "description": "",
        "operationId": "GetAccumulatorByAccumulatorid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "accumulatorid:long",
            "in": "path",
            "description": "Accumulatorid of the Accumulator you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "Timestamp",
            "in": "query",
            "description": "Returns an accumulator value at this specific timestamp (As defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a>)<br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/AccumulatorModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/accumulators": {
      "put": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Updates accumulator values in batch. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
        "description": "",
        "operationId": "PutAccumulators",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/AccumulatorModel"
              }
            },
            "name": "accumulators",
            "description": "An array of Accumulators. For each entry use either (Id) or (UserId + AccumulatorTypeId) to identify an accumulator. The International System of Units is used (meters for Odometers, seconds for Time based accumulators)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/AccumulatorModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/accumulatortypes": {
      "get": {
        "tags": [
          "Accumulator"
        ],
        "summary": "Return a list of AccumulatorTypes.",
        "description": "",
        "operationId": "GetAccumulatorTypes",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/AccumulatorTypeModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applicationtemplates": {
      "get": {
        "tags": [
          "Application"
        ],
        "summary": "Return a list of ApplicationTemplates.",
        "description": "",
        "operationId": "GetApplicationTemplates",
        "parameters": [
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ApplicationTemplateModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/fuelconsumption": {
      "get": {
        "tags": [
          "FuelConsumption"
        ],
        "summary": "List all fuel entries",
        "description": "",
        "operationId": "GetFuelConsumption",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "Start time from which to list fuel refills, defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": true,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "End time to which to list fuel refills, defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": true,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/FuelConsumptionModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "FuelConsumption"
        ],
        "summary": "Add a new fuel entry",
        "description": "",
        "operationId": "PostFuelConsumption",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FuelConsumptionModel"
            },
            "name": "fuelconsumption",
            "description": "FuelConsumption object <br/> RefilledOn parameter is defined by date-time - <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\"><b>RFC3339</b></a><br/>Sample date-time: <b>1996-12-19T16:39:57-08:00</b> <br/>This represents 39 minutes and 57 seconds after the 16th hour of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time). Note that this is equivalent to <b>1996-12-20T00:39:57Z</b> in UTC.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/FuelConsumptionModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/fuelconsumption/{fuelconsumptionid:long}": {
      "delete": {
        "tags": [
          "FuelConsumption"
        ],
        "summary": "Delete a fuel entry",
        "description": "",
        "operationId": "DeleteFuelConsumptionByFuelConsumptionid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fuelconsumptionid:long",
            "in": "path",
            "description": "FuelConsumptionid of the FuelConsumption you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/FuelConsumptionModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/fuelconsumption/{fuelentryid:int}/customfields": {
      "get": {
        "tags": [
          "FuelConsumption"
        ],
        "summary": "Returns fuel entry's custom fields.",
        "description": "",
        "operationId": "GetCustomFields",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fuelentryid:int",
            "in": "path",
            "description": "ID of the fuel consumption entry you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/CustomFieldsModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/users/{userid:int}/fuelconsumption/{fuelentryid:int}/customfields": {
      "post": {
        "tags": [
          "FuelConsumption"
        ],
        "summary": "Updates custom fields for fuel entry.",
        "description": "",
        "operationId": "PostCustomFields",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "fuelentryid:int",
            "in": "path",
            "description": "ID of the fuel consumption entry you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/CustomFieldsModel"
              }
            },
            "name": "customfield",
            "description": "CustomField object <br/> Name-value pairs of custom fields to be added. Names are case sensitive (i.e. same casing as has been set up in the UI)",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/CustomFieldsModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/poicategories": {
      "get": {
        "tags": [
          "POI"
        ],
        "summary": "List POI categories",
        "description": "",
        "operationId": "GetPOICategories",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "POI"
        ],
        "summary": "Add a new POI category",
        "description": "",
        "operationId": "PostPOICategory",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            },
            "name": "poicategory",
            "description": "<p><strong>*MinZoom</strong> and <strong>MaxZoom</strong> should be between 0 and 7. (default is 0)</p> <p><strong>*GeocodingTolerance</strong>: setting -1 is for infinite tolerance, 0 is disabled for geocoding. (default is 0)</p>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/poicategories/{poicategoryid:long}": {
      "put": {
        "tags": [
          "POI"
        ],
        "summary": "Edit a POI category",
        "description": "",
        "operationId": "PutPOICategoryByPOICategoryId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "poicategoryid:long",
            "in": "path",
            "description": "POICategoryId of the POICategory you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            },
            "name": "poicategory",
            "description": "<p><strong>*MinZoom</strong> and <strong>MaxZoom</strong> should be between 0 and 7. (default is 0)</p> <p><strong>*GeocodingTolerance</strong>: setting -1 is for infinite tolerance, 0 is disabled for geocoding. (default is 0)</p>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "POI"
        ],
        "summary": "Delete a POI category",
        "description": "",
        "operationId": "DeletePOICategoryByPOICategoryId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "poicategoryid:long",
            "in": "path",
            "description": "POICategoryId of the POICategory you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POICategoryModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/poicategories": {
      "post": {
        "tags": [
          "POI"
        ],
        "summary": "Add multiple new POI categories",
        "description": "",
        "operationId": "PostPOICategories",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/POICategoryModel"
              }
            },
            "name": "POI location categories",
            "description": "An array of location categories.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/POICategoryModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/poicategories/{categoryid:int}/pois": {
      "get": {
        "tags": [
          "POI"
        ],
        "summary": "List POIs in a category",
        "description": "",
        "operationId": "GetPOIs",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "categoryid:int",
            "in": "path",
            "description": "ID of the POI category for the location(s) you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POIModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "POI"
        ],
        "summary": "Add a new POI to a category",
        "description": "",
        "operationId": "PostPOI",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "categoryid:int",
            "in": "path",
            "description": "ID of the POI category for the location(s) you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/POIModel"
            },
            "name": "poi",
            "description": "<p><strong>*CustomFieldsValue</strong> is read-only, and should be left empty</p>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POIModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/poicategories/{categoryid:int}/pois/{poiid:long}": {
      "put": {
        "tags": [
          "POI"
        ],
        "summary": "Edit a POI in a category",
        "description": "",
        "operationId": "PutPOIByPOIId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "categoryid:int",
            "in": "path",
            "description": "ID of the POI category for the location(s) you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "poiid:long",
            "in": "path",
            "description": "POIId of the POI you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/POIModel"
            },
            "name": "poi",
            "description": "<p><strong>*CustomFieldsValue</strong> is read-only, and should be left empty</p>",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POIModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "POI"
        ],
        "summary": "Delete a POI",
        "description": "",
        "operationId": "DeletePOIByPOIId",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "categoryid:int",
            "in": "path",
            "description": "ID of the POI category for the location(s) you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "poiid:long",
            "in": "path",
            "description": "POIId of the POI you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/POIModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/batch/applications/{applicationid:int}/poicategories/{categoryid:int}/pois": {
      "post": {
        "tags": [
          "POI"
        ],
        "summary": "Add multiple new POIs to category",
        "description": "",
        "operationId": "PostPOIs",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "categoryid:int",
            "in": "path",
            "description": "ID of the POI category for the location(s) you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/POIModel"
              }
            },
            "name": "POI locations",
            "description": "An array of locations.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/POIModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/users/{userid:int}/publish": {
      "get": {
        "tags": [
          "Publish"
        ],
        "summary": "Get a publish link for a user",
        "description": "",
        "operationId": "GetPublishByPublishid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "userid:int",
            "in": "path",
            "description": "ID of the user.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "expires",
            "in": "query",
            "description": "Time in minutes when the link should expire",
            "required": true,
            "type": "integer"
          },
          {
            "name": "maptype",
            "in": "query",
            "description": "Which map type to use. Default gmap (Google Maps). Supported Maps: gmap, nativemap (GpsGate native map), googlemaplink (Link to Google Maps with vehicle current location)",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/PublishModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reports": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Read Reports.",
        "description": "",
        "operationId": "GetReports",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ReportModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Create Report.",
        "description": "",
        "operationId": "PostReport",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportModel"
            },
            "name": "report",
            "description": "Report object <br/> Date-time parameters (<b>periodEnd</b> and <b>periodStart</b>) should be sent in UTC",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ReportModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reports/{reportid:long}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Read Report.",
        "description": "",
        "operationId": "GetReportByReportid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:long",
            "in": "path",
            "description": "Reportid of the Report you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ReportModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "put": {
        "tags": [
          "Report"
        ],
        "summary": "Update Report.",
        "description": "",
        "operationId": "PutReportByReportid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:long",
            "in": "path",
            "description": "Reportid of the Report you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReportModel"
            },
            "name": "report",
            "description": "Report object <br/> Date-time parameters (<b>periodEnd</b> and <b>periodStart</b>) should be sent in UTC",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/ReportModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Delete Report.",
        "description": "",
        "operationId": "DeleteReportByReportid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:long",
            "in": "path",
            "description": "Reportid of the Report you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reports/{reportid:int}/renderings": {
      "post": {
        "tags": [
          "Report"
        ],
        "summary": "Render report.",
        "description": "",
        "operationId": "PostRendering",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:int",
            "in": "path",
            "description": "ID of the Report.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/RenderingCreateModel"
            },
            "name": "rendering",
            "description": "Rendering object <br/>Send date-time parameters (<b>periodEnd</b>, <b>periodStart</b>) in UTC. <br/>Send <b>timeSpan</b> parameter in this format <b>dd:hh:mm:ss</b> <br/> Examples: 1:02:03:04 represents 1 day and 2 hours and 3 minutes and 4 seconds. 05:06:00 represents 5 hours and 6 minutes. 07 represents 7 seconds.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/RenderingStatusModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reports/{reportid:int}/renderings/{renderingid:long}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Read rendering status.",
        "description": "",
        "operationId": "GetRenderingByRenderingid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:int",
            "in": "path",
            "description": "ID of the Report.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "renderingid:long",
            "in": "path",
            "description": "Renderingid of the Rendering you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/RenderingStatusModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Report"
        ],
        "summary": "Cancel rendering.",
        "description": "",
        "operationId": "DeleteRenderingByRenderingid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "reportid:int",
            "in": "path",
            "description": "ID of the Report.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "renderingid:long",
            "in": "path",
            "description": "Renderingid of the Rendering you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reporttemplates": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Read ReportTemplates.",
        "description": "",
        "operationId": "GetReportTemplates",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ReportTemplateModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/reports/formats": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Read ReportFormats.",
        "description": "",
        "operationId": "GetFormats",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/ReportFormatModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/passengers": {
      "get": {
        "tags": [
          "Passenger Manager"
        ],
        "summary": "Returns a list of Passengers.",
        "description": "",
        "operationId": "GetPassengers",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "FromIndex",
            "in": "query",
            "description": "The starting index of the page (exclusive)",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 0
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "The size of the page",
            "required": false,
            "type": "integer",
            "default": 1000
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/PassengerModel"
              }
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "post": {
        "tags": [
          "Passenger Manager"
        ],
        "summary": "Adds a Passenger.",
        "description": "",
        "operationId": "PostPassenger",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PassengerModel"
            },
            "name": "passenger",
            "description": "Passenger object",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          },
          "default": {
            "description": "default",
            "schema": {
              "$ref": "#/definitions/PassengerModel"
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    },
    "/applications/{applicationid:int}/passengers/{passengerid:long}": {
      "delete": {
        "tags": [
          "Passenger Manager"
        ],
        "summary": "Removes a Passenger",
        "description": "",
        "operationId": "DeletePassengerByPassengerid",
        "parameters": [
          {
            "name": "applicationid:int",
            "in": "path",
            "description": "ID of the application you want to work with.",
            "required": true,
            "type": "integer"
          },
          {
            "name": "passengerid:long",
            "in": "path",
            "description": "Passengerid of the Passenger you want to work with.",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK: The request has succeeded. The information returned with the response is dependent on the method used in the request."
          },
          "400": {
            "description": "Bad Request: The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications."
          },
          "401": {
            "description": "Unauthorized: The request requires user authentication. The client MAY repeat the request with a suitable Authorization header field. If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials."
          },
          "403": {
            "description": "Forbidden: The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated."
          },
          "404": {
            "description": "Not Found: The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent."
          },
          "500": {
            "description": "Internal Server Error: The server encountered an unexpected condition which prevented it from fulfilling the request."
          },
          "503": {
            "description": "Service Unavailable: The server is currently unable to handle the request due to maintenance of the server or because the service is not running."
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ]
      },
      "parameters": []
    }
  },
  "definitions": {
    "DeployAction": {
      "type": "string",
      "enum": [
        "None",
        "Update",
        "Install"
      ]
    },
    "DeployStatusModel": {
      "properties": {
        "action": {
          "$ref": "#/definitions/DeployAction"
        },
        "currentStep": {
          "type": "integer"
        },
        "pluginId": {
          "type": "integer"
        },
        "pluginName": {
          "type": "string"
        },
        "pluginNamespace": {
          "type": "string"
        },
        "stepDescription": {
          "type": "string"
        },
        "targetVersion": {
          "type": "string"
        },
        "totalSteps": {
          "type": "integer"
        }
      },
      "required": [
        "action",
        "currentStep",
        "pluginId",
        "totalSteps"
      ],
      "type": "object"
    },
    "InstallationStatus": {
      "type": "string",
      "enum": [
        "All",
        "NotInstalled",
        "Outdated",
        "UpToDate"
      ]
    },
    "RepositoryModel": {
      "properties": {
        "category": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "downloadUrl": {
          "type": "string"
        },
        "homepageUrl": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "packageVersionString": {
          "type": "string"
        },
        "platformDependencies": {
          "type": "string"
        },
        "repositoryUrl": {
          "type": "string"
        },
        "requiresValidSupport": {
          "type": "boolean"
        },
        "serverVersionString": {
          "type": "string"
        },
        "targetFramework": {
          "type": "string"
        }
      },
      "required": [
        "requiresValidSupport"
      ],
      "type": "object"
    },
    "PluginModel": {
      "properties": {
        "category": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "packageVersionString": {
          "type": "string"
        },
        "repositoryUrl": {
          "type": "string"
        },
        "serverVersionString": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "PluginUpdateModel": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PluginInstallModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplicationModel": {
      "properties": {
        "created": {
          "type": "string"
        },
        "culture": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire": {
          "type": "string"
        },
        "expired": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "isInitialized": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "licensesUsed": {
          "type": "integer"
        },
        "maxUsers": {
          "type": "integer"
        },
        "measurement": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "userCount": {
          "type": "integer"
        }
      },
      "required": [
        "created",
        "expired",
        "id",
        "isInitialized",
        "licensesUsed",
        "userCount"
      ],
      "type": "object"
    },
    "ApplicationCreateModel": {
      "properties": {
        "adminUserId": {
          "type": "integer"
        },
        "applicationTemplateId": {
          "type": "integer"
        },
        "culture": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "language": {
          "type": "string"
        },
        "maxUsers": {
          "type": "integer"
        },
        "measurement": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "required": [
        "adminUserId",
        "applicationTemplateId",
        "id"
      ],
      "type": "object"
    },
    "ApplicationEditModel": {
      "properties": {
        "culture": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "expire": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "language": {
          "type": "string"
        },
        "maxUsers": {
          "type": "integer"
        },
        "measurement": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ViewModel": {
      "properties": {
        "applicationID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "matchAllTags": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "statusFilter": {
          "$ref": "#/definitions/GateUserNetStatus"
        },
        "tagIDs": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "applicationID",
        "id",
        "matchAllTags",
        "statusFilter"
      ],
      "type": "object"
    },
    "GateUserNetStatus": {
      "type": "string",
      "enum": [
        "Sending",
        "Connected",
        "Offline",
        "NeverBeenConnected"
      ]
    },
    "VariableModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "unitName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserModel": {
      "properties": {
        "calculatedSpeed": {
          "type": "number"
        },
        "description": {
          "type": "string"
        },
        "deviceActivity": {
          "type": "string"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeviceModel"
          }
        },
        "driverID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/UserIconModel"
        },
        "id": {
          "type": "integer"
        },
        "lastTransport": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "trackPoint": {
          "$ref": "#/definitions/TrackPoint"
        },
        "username": {
          "type": "string"
        },
        "userTemplateID": {
          "type": "integer"
        }
      },
      "required": [
        "calculatedSpeed",
        "deviceActivity",
        "id",
        "userTemplateID"
      ],
      "type": "object"
    },
    "UserEditModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "driverID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "UserCreateModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "devices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeviceCreateModel"
          }
        },
        "driverID": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userTypeId": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "userTypeId"
      ],
      "type": "object"
    },
    "Velocity": {
      "properties": {
        "groundSpeed": {
          "type": "number"
        },
        "heading": {
          "type": "number"
        }
      },
      "required": [
        "groundSpeed",
        "heading"
      ],
      "type": "object"
    },
    "Position": {
      "properties": {
        "altitude": {
          "type": "number"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      },
      "required": [
        "altitude",
        "latitude",
        "longitude"
      ],
      "type": "object"
    },
    "TrackPoint": {
      "properties": {
        "position": {
          "$ref": "#/definitions/Position"
        },
        "uTC": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "velocity": {
          "$ref": "#/definitions/Velocity"
        }
      },
      "required": [
        "uTC",
        "valid"
      ],
      "type": "object"
    },
    "MSISDN": {
      "properties": {
        "raw": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OneWireBag": {
      "properties": {
        "deviceDefinitionID": {
          "type": "integer"
        },
        "deviceID": {
          "type": "integer"
        },
        "oneWireID": {
          "type": "string"
        },
        "variableName": {
          "type": "string"
        }
      },
      "required": [
        "deviceDefinitionID",
        "deviceID"
      ],
      "type": "object"
    },
    "DeviceModel": {
      "properties": {
        "aPN": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "deviceDefinitionID": {
          "type": "integer"
        },
        "devicePassword": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "gPRSPassword": {
          "type": "string"
        },
        "gPRSUsername": {
          "type": "string"
        },
        "hidePosition": {
          "type": "boolean"
        },
        "iD": {
          "type": "integer"
        },
        "iMEI": {
          "type": "string"
        },
        "lastIP": {
          "type": "string"
        },
        "lastPort": {
          "type": "integer"
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "mobileNetworkID": {
          "type": "integer"
        },
        "msgFieldDictionaryID": {
          "type": "integer"
        },
        "mSISDN": {
          "$ref": "#/definitions/MSISDN"
        },
        "name": {
          "type": "string"
        },
        "oneWireVariables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/OneWireBag"
          }
        },
        "ownerEmail": {
          "type": "string"
        },
        "ownerID": {
          "type": "integer"
        },
        "ownerName": {
          "type": "string"
        },
        "ownerUsername": {
          "type": "string"
        },
        "profileId": {
          "type": "integer"
        },
        "protocolID": {
          "type": "string"
        },
        "protocolVersionID": {
          "type": "integer"
        },
        "proximity": {
          "type": "number"
        },
        "staticIP": {
          "type": "string"
        },
        "staticPort": {
          "type": "integer"
        },
        "timeStamp": {
          "type": "string"
        }
      },
      "required": [
        "created",
        "deviceDefinitionID",
        "hidePosition",
        "iD",
        "lastPort",
        "latitude",
        "longitude",
        "mobileNetworkID",
        "msgFieldDictionaryID",
        "ownerID",
        "profileId",
        "protocolVersionID",
        "proximity",
        "staticPort",
        "timeStamp"
      ],
      "type": "object"
    },
    "DeviceCreateModel": {
      "properties": {
        "deviceMapperID": {
          "type": "integer"
        },
        "deviceTypeId": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "imei": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      },
      "required": [
        "deviceMapperID",
        "deviceTypeId",
        "id"
      ],
      "type": "object"
    },
    "UserIconModel": {
      "properties": {
        "iconGUID": {
          "type": "string"
        },
        "iconOffsetX": {
          "type": "integer"
        },
        "iconOffsetY": {
          "type": "integer"
        },
        "rotatable": {
          "type": "boolean"
        }
      },
      "required": [
        "iconOffsetX",
        "iconOffsetY",
        "rotatable"
      ],
      "type": "object"
    },
    "TripInfoModel": {
      "properties": {
        "endTrackPoint": {
          "$ref": "#/definitions/TrackPoint"
        },
        "isIdle": {
          "type": "boolean"
        },
        "startTrackPoint": {
          "$ref": "#/definitions/TrackPoint"
        },
        "totalDistance": {
          "type": "number"
        },
        "trackInfoId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        }
      },
      "required": [
        "isIdle",
        "totalDistance",
        "trackInfoId",
        "userId"
      ],
      "type": "object"
    },
    "TrackModel": {
      "properties": {
        "position": {
          "$ref": "#/definitions/Position"
        },
        "serverUtc": {
          "type": "string"
        },
        "trackInfoId": {
          "type": "integer"
        },
        "uTC": {
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "velocity": {
          "$ref": "#/definitions/Velocity"
        }
      },
      "required": [
        "serverUtc",
        "trackInfoId",
        "uTC",
        "valid"
      ],
      "type": "object"
    },
    "TrackInfoModel": {
      "properties": {
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        },
        "count": {
          "type": "integer"
        },
        "endPosition": {
          "$ref": "#/definitions/Position"
        },
        "id": {
          "type": "integer"
        },
        "startPosition": {
          "$ref": "#/definitions/Position"
        },
        "totalDistance": {
          "type": "number"
        },
        "updated": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      },
      "required": [
        "count",
        "id",
        "totalDistance",
        "updated",
        "userId"
      ],
      "type": "object"
    },
    "BoundingBox": {
      "properties": {
        "maxM": {
          "type": "number"
        },
        "maxTime": {
          "type": "string"
        },
        "maxX": {
          "type": "number"
        },
        "maxY": {
          "type": "number"
        },
        "maxZ": {
          "type": "number"
        },
        "minM": {
          "type": "number"
        },
        "minTime": {
          "type": "string"
        },
        "minX": {
          "type": "number"
        },
        "minY": {
          "type": "number"
        },
        "minZ": {
          "type": "number"
        }
      },
      "required": [
        "maxM",
        "maxTime",
        "maxX",
        "maxY",
        "maxZ",
        "minM",
        "minTime",
        "minX",
        "minY",
        "minZ"
      ],
      "type": "object"
    },
    "UserStatusModel": {
      "properties": {
        "deviceActivity": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "username": {
          "type": "string"
        },
        "uTC": {
          "type": "string"
        },
        "variables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VariableStatusModel"
          }
        },
        "velocity": {
          "$ref": "#/definitions/Velocity"
        }
      },
      "required": [
        "deviceActivity",
        "id",
        "uTC"
      ],
      "type": "object"
    },
    "VariableStatusModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "time"
      ],
      "type": "object"
    },
    "CommandModel": {
      "properties": {
        "aliasID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "localName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "outgoing": {
          "type": "boolean"
        },
        "special": {
          "type": "boolean"
        },
        "transport": {
          "type": "string"
        }
      },
      "required": [
        "aliasID",
        "id",
        "outgoing",
        "special"
      ],
      "type": "object"
    },
    "CommandAddModel": {
      "properties": {
        "command": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CommandStatusModel": {
      "properties": {
        "commandName": {
          "type": "string"
        },
        "currentStep": {
          "type": "integer"
        },
        "customState": {
          "type": "string"
        },
        "errorDescription": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "lastActivity": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stepDescription": {
          "type": "string"
        },
        "totalSteps": {
          "type": "integer"
        }
      },
      "required": [
        "currentStep",
        "id",
        "lastActivity",
        "totalSteps"
      ],
      "type": "object"
    },
    "UserCustomFieldModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AccumulatorModel": {
      "properties": {
        "accumulatorTypeId": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "timestamp": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "value": {
          "type": "number"
        }
      },
      "required": [
        "accumulatorTypeId",
        "id",
        "timestamp",
        "userId",
        "value"
      ],
      "type": "object"
    },
    "UserTypeModel": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ApplicationTrackInfoModel": {
      "properties": {
        "count": {
          "type": "integer"
        },
        "created": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "updated": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        }
      },
      "required": [
        "count",
        "created",
        "id",
        "updated",
        "userId"
      ],
      "type": "object"
    },
    "TokenModel": {
      "properties": {
        "password": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Credentials": {
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApiKey": {
      "properties": {
        "token": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TagModel": {
      "properties": {
        "applicationId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "usersIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "applicationId",
        "id"
      ],
      "type": "object"
    },
    "APIModel": {
      "properties": {
        "id": {
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "SessionModel": {
      "properties": {
        "application": {
          "$ref": "#/definitions/SessionApplicationModel"
        },
        "culture": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "measurement": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/SessionUserModel"
        }
      },
      "type": "object"
    },
    "SessionApplicationModel": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "SessionUserModel": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "RoleModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "usersIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ReverseGeocodeResult": {
      "properties": {
        "geocoderProviderSource": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/Location"
        }
      },
      "type": "object"
    },
    "Location": {
      "properties": {
        "address": {
          "type": "string"
        },
        "administrativeAreaName": {
          "type": "string"
        },
        "cityName": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "formattedResult": {
          "type": "string"
        },
        "neighborhood": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        },
        "postalCodeNumber": {
          "type": "string"
        },
        "streetBox": {
          "type": "string"
        },
        "streetName": {
          "type": "string"
        },
        "streetNumber": {
          "type": "string"
        },
        "subAdministrativeAreaName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MessageProviderModel": {
      "properties": {
        "callInterval": {
          "type": "integer"
        },
        "customLong": {
          "type": "integer"
        },
        "customString": {
          "type": "string"
        },
        "defaultProvider": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "isStarted": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "routeLabel": {
          "type": "string"
        },
        "timeout": {
          "type": "integer"
        },
        "typeID": {
          "type": "integer"
        },
        "url": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "callInterval",
        "customLong",
        "defaultProvider",
        "enabled",
        "id",
        "isStarted",
        "timeout",
        "typeID"
      ],
      "type": "object"
    },
    "MessageProviderTypeModel": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "GeofenceModel": {
      "properties": {
        "boundingBox": {
          "$ref": "#/definitions/GeofenceBoundingBoxModel"
        },
        "circleShape": {
          "$ref": "#/definitions/CircleShape"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "polygonShape": {
          "$ref": "#/definitions/PolygonShape"
        },
        "routeShape": {
          "$ref": "#/definitions/RouteShape"
        },
        "shapeType": {
          "$ref": "#/definitions/ShapeType"
        }
      },
      "required": [
        "id",
        "shapeType"
      ],
      "type": "object"
    },
    "Position2D": {
      "properties": {
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        }
      },
      "required": [
        "latitude",
        "longitude"
      ],
      "type": "object"
    },
    "ShapeType": {
      "type": "string",
      "enum": [
        "Polygon",
        "Circle",
        "Route"
      ]
    },
    "PolygonShape": {
      "properties": {
        "vertices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Position2D"
          }
        }
      },
      "type": "object"
    },
    "CircleShape": {
      "properties": {
        "center": {
          "$ref": "#/definitions/Position2D"
        },
        "radius": {
          "type": "number"
        }
      },
      "required": [
        "radius"
      ],
      "type": "object"
    },
    "RouteShape": {
      "properties": {
        "radius": {
          "type": "number"
        },
        "vertices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Position2D"
          }
        }
      },
      "required": [
        "radius"
      ],
      "type": "object"
    },
    "GeofenceBoundingBoxModel": {
      "properties": {
        "maxX": {
          "type": "number"
        },
        "maxY": {
          "type": "number"
        },
        "minX": {
          "type": "number"
        },
        "minY": {
          "type": "number"
        }
      },
      "required": [
        "maxX",
        "maxY",
        "minX",
        "minY"
      ],
      "type": "object"
    },
    "GeofenceGroupModel": {
      "properties": {
        "colour": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "geofenceIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "pinned": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer"
        },
        "useInGeocoding": {
          "type": "boolean"
        }
      },
      "required": [
        "id",
        "pinned",
        "priority",
        "useInGeocoding"
      ],
      "type": "object"
    },
    "GeocodeResult": {
      "properties": {
        "geocoderProviderSource": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Location"
          }
        },
        "query": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "EventModel": {
      "properties": {
        "applicationId": {
          "type": "integer"
        },
        "arguments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/Argument"
          }
        },
        "boundingBox": {
          "$ref": "#/definitions/BoundingBox"
        },
        "closed": {
          "type": "boolean"
        },
        "closedByUser": {
          "type": "string"
        },
        "closedTimeStamp": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "endPosition": {
          "$ref": "#/definitions/Position"
        },
        "eventStage": {
          "type": "integer"
        },
        "expressionEvaluatorId": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "ongoing": {
          "type": "boolean"
        },
        "ruleName": {
          "type": "string"
        },
        "startPosition": {
          "$ref": "#/definitions/Position"
        },
        "supportUi": {
          "type": "boolean"
        },
        "userId": {
          "type": "integer"
        }
      },
      "required": [
        "applicationId",
        "closed",
        "closedTimeStamp",
        "eventStage",
        "expressionEvaluatorId",
        "id",
        "ongoing",
        "supportUi",
        "userId"
      ],
      "type": "object"
    },
    "Argument": {
      "properties": {
        "argumentID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "eventID": {
          "type": "integer"
        },
        "sIValue": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "variable": {
          "type": "string"
        }
      },
      "required": [
        "argumentID",
        "eventID"
      ],
      "type": "object"
    },
    "EventRuleModel": {
      "properties": {
        "applicationID": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "tagIDs": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      },
      "required": [
        "applicationID",
        "disabled",
        "id"
      ],
      "type": "object"
    },
    "DeviceTypeModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "DeviceMapperModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "AccumulatorTypeModel": {
      "properties": {
        "applicationId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "applicationId",
        "id"
      ],
      "type": "object"
    },
    "ApplicationTemplateModel": {
      "properties": {
        "created": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "created",
        "id"
      ],
      "type": "object"
    },
   "CustomFieldsCustomFieldModel": {
      "properties": {
        "defaultValue": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "label": {
          "type": "string"
        },
        "objectType": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "type": {
          "type": "integer"
        }
      },
      "required": [
        "id",
        "required",
        "type"
      ],
      "type": "object"
    },
    "FuelConsumptionModel": {
      "properties": {
        "id": {
          "type": "integer"
        },
        "refilledOn": {
          "type": "string"
        },
        "userId": {
          "type": "integer"
        },
        "volume": {
          "type": "number"
        }
      },
      "required": [
        "id",
        "refilledOn",
        "userId",
        "volume"
      ],
      "type": "object"
    },
    "CustomFieldsModel": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "POICategoryModel": {
      "properties": {
        "color": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "geocodingAddressOptions": {
          "$ref": "#/definitions/GeocodingAddressOptions"
        },
        "geocodingTolerance": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "maxZoom": {
          "type": "integer"
        },
        "minZoom": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "geocodingAddressOptions",
        "geocodingTolerance",
        "id",
        "maxZoom",
        "minZoom"
      ],
      "type": "object"
    },
    "GeocodingAddressOptions": {
      "type": "string",
      "enum": [
        "None",
        "Bearing",
        "Distance",
        "BearingAndDistance"
      ]
    },
    "POIModel": {
      "properties": {
        "categoryId": {
          "type": "integer"
        },
        "customFieldsValue": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "position": {
          "$ref": "#/definitions/Position"
        }
      },
      "required": [
        "categoryId",
        "id"
      ],
      "type": "object"
    },
    "PublishModel": {
      "properties": {
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ReportModel": {
      "properties": {
        "applicationId": {
          "type": "integer"
        },
        "definitionId": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportParameterModel"
          }
        },
        "reportFormatId": {
          "type": "integer"
        },
        "schedule": {
          "$ref": "#/definitions/ReportScheduleModel"
        },
        "showParameters": {
          "type": "boolean"
        }
      },
      "required": [
        "applicationId",
        "definitionId",
        "id",
        "reportFormatId",
        "showParameters"
      ],
      "type": "object"
    },
    "ReportParameterModel": {
      "properties": {
        "arrayValues": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parameterName": {
          "type": "string"
        },
        "periodEnd": {
          "type": "string"
        },
        "periodStart": {
          "type": "string"
        },
        "timeSpan": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "visible": {
          "type": "boolean"
        }
      },
      "required": [
        "visible"
      ],
      "type": "object"
    },
    "ReportScheduleModel": {
      "properties": {
        "dayOfMonth": {
          "type": "integer"
        },
        "daysInWeek": {
          "$ref": "#/definitions/DaysInWeekModel"
        },
        "fileName": {
          "type": "string"
        },
        "hours": {
          "type": "integer"
        },
        "ignoreSendingBlank": {
          "type": "boolean"
        },
        "minutes": {
          "type": "integer"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "reportFormatId": {
          "type": "integer"
        },
        "scheduleType": {
          "$ref": "#/definitions/ReportScheduleType"
        },
        "seconds": {
          "type": "integer"
        },
        "transport": {
          "$ref": "#/definitions/ReportDeliveryTransport"
        },
        "weekInMonth": {
          "$ref": "#/definitions/WeekInMonthModel"
        }
      },
      "required": [
        "dayOfMonth",
        "hours",
        "ignoreSendingBlank",
        "minutes",
        "reportFormatId",
        "scheduleType",
        "seconds",
        "transport"
      ],
      "type": "object"
    },
    "ReportParameterType": {
      "type": "string",
      "enum": [
        "Generic",
        "Array",
        "TimeSpan",
        "Daily",
        "Monthly",
        "Weekly",
        "Custom"
      ]
    },
    "ReportDeliveryTransport": {
      "type": "string",
      "enum": [
        "Email",
        "FileSave",
        "None"
      ]
    },
    "ReportScheduleType": {
      "type": "string",
      "enum": [
        "DayOfMonth",
        "WeeksAndDays"
      ]
    },
    "WeekInMonthModel": {
      "properties": {
        "first": {
          "type": "boolean"
        },
        "fourth": {
          "type": "boolean"
        },
        "last": {
          "type": "boolean"
        },
        "second": {
          "type": "boolean"
        },
        "third": {
          "type": "boolean"
        }
      },
      "required": [
        "first",
        "fourth",
        "last",
        "second",
        "third"
      ],
      "type": "object"
    },
    "DaysInWeekModel": {
      "properties": {
        "friday": {
          "type": "boolean"
        },
        "monday": {
          "type": "boolean"
        },
        "saturday": {
          "type": "boolean"
        },
        "sunday": {
          "type": "boolean"
        },
        "thursday": {
          "type": "boolean"
        },
        "tuesday": {
          "type": "boolean"
        },
        "wednesday": {
          "type": "boolean"
        }
      },
      "required": [
        "friday",
        "monday",
        "saturday",
        "sunday",
        "thursday",
        "tuesday",
        "wednesday"
      ],
      "type": "object"
    },
    "RenderingCreateModel": {
      "properties": {
        "emailAddress": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportParameterModel"
          }
        },
        "reportFormatId": {
          "type": "integer"
        },
        "reportId": {
          "type": "integer"
        },
        "sendEmail": {
          "type": "boolean"
        }
      },
      "required": [
        "reportFormatId",
        "reportId",
        "sendEmail"
      ],
      "type": "object"
    },
    "RenderingStatusModel": {
      "properties": {
        "currentStep": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "isReady": {
          "type": "boolean"
        },
        "latestError": {
          "type": "string"
        },
        "outputFile": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/ReportParameterModel"
          }
        },
        "percentage": {
          "type": "integer"
        },
        "reportFormatId": {
          "type": "integer"
        },
        "reportId": {
          "type": "integer"
        },
        "steps": {
          "type": "integer"
        }
      },
      "required": [
        "currentStep",
        "id",
        "isReady",
        "percentage",
        "reportFormatId",
        "reportId",
        "steps"
      ],
      "type": "object"
    },
    "ReportTemplateModel": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "ReportFormatModel": {
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "fileExtension": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        }
      },
      "required": [
        "enabled",
        "id"
      ],
      "type": "object"
    },
    "LogoutType": {
      "type": "string",
      "enum": [
        "NotLogout",
        "Device",
        "ManualByStudent",
        "ManualByBus",
        "Automatic",
        "Dangling",
        "DoubleLogin"
      ]
    },
    "PassengerModel": {
      "properties": {
        "applicationId": {
          "type": "integer"
        },
        "city": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "defaultBusId": {
          "type": "integer"
        },
        "email": {
          "type": "string"
        },
        "firstGuardianEmail": {
          "type": "string"
        },
        "firstGuardianFirstname": {
          "type": "string"
        },
        "firstGuardianLastname": {
          "type": "string"
        },
        "firstGuardianPhone": {
          "type": "string"
        },
        "firstname": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "lastname": {
          "type": "string"
        },
        "latestLoginBusId": {
          "type": "integer"
        },
        "latestLoginTimestamp": {
          "type": "string"
        },
        "latestLogoutTimestamp": {
          "type": "string"
        },
        "latestLogoutType": {
          "$ref": "#/definitions/LogoutType"
        },
        "passengerIdentifier": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "picture": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "schoolEmail": {
          "type": "string"
        },
        "schoolName": {
          "type": "string"
        },
        "schoolPhone": {
          "type": "string"
        },
        "secondGuardianEmail": {
          "type": "string"
        },
        "secondGuardianFirstname": {
          "type": "string"
        },
        "secondGuardianLastname": {
          "type": "string"
        },
        "secondGuardianPhone": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "streetAddress": {
          "type": "string"
        }
      },
      "required": [
        "applicationId",
        "defaultBusId",
        "id",
        "latestLoginBusId",
        "latestLoginTimestamp",
        "latestLogoutTimestamp",
        "latestLogoutType"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "ApiKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Plugins"
    },
    {
      "name": "Application"
    },
    {
      "name": "Views"
    },
    {
      "name": "Variables"
    },
    {
      "name": "Users"
    },
    {
      "name": "Tracks"
    },
    {
      "name": "Devices"
    },
    {
      "name": "Commands"
    },
    {
      "name": "CommandStatus"
    },
    {
      "name": "Accumulator"
    },
    {
      "name": "Tokens",
      "description": "Use this resource to get an ApiKey"
    },
    {
      "name": "Tags"
    },
    {
      "name": "Session"
    },
    {
      "name": "Roles"
    },
    {
      "name": "Geocoding"
    },
    {
      "name": "MessageProviders"
    },
    {
      "name": "MessageProviderTypes"
    },
    {
      "name": "Geofences"
    },
    {
      "name": "GeofenceGroups"
    },
    {
      "name": "GeofenceGroups/Geofence",
      "description": "Operations for listing/adding/removing geofence(s) in/to/from a Geofence Groups"
    },
    {
      "name": "Events"
    },
    {
      "name": "FuelConsumption"
    },
    {
      "name": "POI"
    },
    {
      "name": "Publish"
    },
    {
      "name": "Report"
    },
    {
      "name": "Passenger Manager"
    }
  ],
  "externalDocs": {
    "Description": "GpsGate API blog post",
    "Url": "http://www.gpsgate.com"
  }
}